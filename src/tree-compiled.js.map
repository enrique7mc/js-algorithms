{"version":3,"sources":["tree.js"],"names":[],"mappings":"AAAA;;AAEA,SAAS,IAAT,CAAc,IAAd,EAAoB,QAApB,EAA8B;AAC1B,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,QAAL,GAAgB,YAAY,EAA5B;AACH;;AAED,KAAK,SAAL,CAAe,QAAf,GAA0B,UAAU,IAAV,EAAgB;AACxC,SAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB;AACD,CAFD;;AAIA,SAAS,GAAT,CAAa,IAAb,EAAmB;AACf,UAAM,QAAQ,CAAC,IAAD,CAAd;AACA,WAAM,MAAM,MAAN,GAAe,CAArB,EAAwB;AACpB,YAAI,OAAO,MAAM,KAAN,EAAX;AACA,gBAAQ,GAAR,CAAY,KAAK,IAAjB;AACA,aAAK,MAAM,KAAX,IAAoB,KAAK,QAAzB,EAAmC;AAC/B,kBAAM,IAAN,CAAW,KAAX;AACH;AACJ;AACJ;;AAED,SAAS,aAAT,CAAuB,IAAvB,EAA6B,GAA7B,EAAkC;AAC9B,QAAI,QAAQ,CAAZ,EAAe;AAAE,eAAO,IAAP;AAAc;AAC/B,QAAI,QAAQ,CAAC,IAAD,CAAZ;AACA,QAAI,WAAW,EAAf;AACA,QAAI,QAAQ,CAAZ;AACA,WAAM,MAAM,MAAN,GAAe,CAArB,EAAwB;AACpB,eAAO,MAAM,MAAN,GAAe,CAAtB,EAAyB;AACrB,gBAAI,SAAS,MAAM,KAAN,EAAb;AACA,iBAAK,MAAM,KAAX,IAAoB,OAAO,QAA3B,EAAqC;AACjC,yBAAS,IAAT,CAAc,KAAd;AACH;AACJ;AACD,YAAK,EAAE,KAAF,KAAY,GAAjB,EAAsB;AAClB,mBAAO,QAAP;AACH;;AAED,eAAO,SAAS,MAAT,GAAkB,CAAzB,EAA4B;AACxB,kBAAM,IAAN,CAAW,SAAS,KAAT,EAAX;AACH;AACJ;AACJ;;AAED,SAAS,sBAAT,CAAgC,IAAhC,EAAsC,KAAtC,EAA6C,GAA7C,EAAkD;AAC9C,QAAI,UAAU,GAAd,EAAmB;AAAE,eAAO,IAAP;AAAc;AACnC;AACA,QAAI,SAAS,EAAb;AACA,SAAI,IAAI,KAAR,IAAiB,KAAK,QAAtB,EAAgC;AAC5B,eAAO,IAAP,CAAY,uBAAuB,KAAvB,EAA8B,KAA9B,EAAqC,GAArC,CAAZ;AACH;;AAED,WAAO,MAAP;AACH;;AAED,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,CAAT;AACA,IAAI,MAAM,IAAI,IAAJ,CAAS,EAAT,CAAV;AACA,IAAI,MAAM,IAAI,IAAJ,CAAS,EAAT,CAAV;;AAEA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,EAAY,CAAC,GAAD,CAAZ,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,EAAY,CAAC,EAAD,EAAK,GAAL,CAAZ,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,CAAT;;AAEA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,EAAY,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAZ,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,EAAY,CAAC,EAAD,EAAK,EAAL,CAAZ,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,EAAY,CAAC,EAAD,EAAK,EAAL,CAAZ,CAAT;;;;;AAKA,IAAI,SAAS,cAAc,EAAd,EAAkB,CAAlB,CAAb;AACA,QAAQ,GAAR,CAAY,MAAZ","file":"tree-compiled.js","sourcesContent":["'use strict';\n\nfunction Node(data, children) {\n    this.data = data;\n    this.children = children || [];\n}\n\nNode.prototype.addChild = function (node) {\n  this.children.push(node);\n};\n\nfunction BFS(root) {\n    const queue = [root];\n    while(queue.length > 0) {\n        let node = queue.shift();\n        console.log(node.data);\n        for (const child of node.children) {\n            queue.push(child);\n        }\n    }\n}\n\nfunction getGeneration(root, gen) {\n    if (gen === 0) { return root; }\n    let queue = [root];\n    let children = [];\n    let depth = 0;\n    while(queue.length > 0) {\n        while (queue.length > 0) {\n            let parent = queue.shift();\n            for (const child of parent.children) {\n                children.push(child);\n            }\n        }\n        if  (++depth === gen) {\n            return children;\n        }\n\n        while (children.length > 0) {\n            queue.push(children.shift());\n        }\n    }\n}\n\nfunction getGenerationRecursive(root, depth, gen) {\n    if (depth === gen) { return root; }\n    depth++;\n    let result = [];\n    for(let child of root.children) {\n        result.push(getGenerationRecursive(child, depth, gen));\n    }\n\n    return result;\n}\n\nlet n9 = new Node(9);\nlet n10 = new Node(10);\nlet n11 = new Node(11);\n\nlet n4 = new Node(4, [n11]);\nlet n5 = new Node(5);\nlet n6 = new Node(6, [n9, n10]);\nlet n7 = new Node(7);\nlet n8 = new Node(8);\n\nlet n3 = new Node(3, [n4, n5, n6]);\nlet n2 = new Node(2, [n8, n7]);\nlet n1 = new Node(1, [n3, n2]);\n\n// BFS(n1);\n\n// let result = getGenerationRecursive(n1, 0, 2);\nlet result = getGeneration(n1, 3);\nconsole.log(result);"]}