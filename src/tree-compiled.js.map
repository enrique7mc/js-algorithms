{"version":3,"sources":["tree.js"],"names":[],"mappings":"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","file":"tree-compiled.js","sourcesContent":["'use strict';\n\nfunction Node(data, left, right) {\n  this.data = data;\n  this.left = left;\n  this.right = right;\n}\n\nfunction BST() {\n  this.root = null;\n  this.insert = insert;\n  this.getMin = getMin;\n  this.getMax = getMax;\n  this.find = find;\n}\n\nfunction insert(data) {\n  const n = new Node(data, null, null);\n  if (this.root == null) {\n    this.root = n;\n    return;\n  }\n\n  let current = this.root;\n  let parent;\n  while (true) {\n    parent = current;\n    if (data < current.data) {\n      current = current.left;\n      if (current == null) {\n        parent.left = n;\n        break;\n      }\n    } else {\n      current = current.right;\n      if (current == null) {\n        parent.right = n;\n        break;\n      }\n    }\n  }\n}\n\nfunction inOrder(node) {\n  if (node == null) return;\n  inOrder(node.left);\n  console.log(node.data);\n  inOrder(node.right);\n}\n\nfunction preOrder(node) {\n  if (node == null) return;\n  console.log(node.data);\n  preOrder(node.left);\n  preOrder(node.right);\n}\n\nfunction posOrder(node) {\n  if (node == null) return;\n  posOrder(node.left);\n  posOrder(node.right);\n  console.log(node.data);\n}\n\nfunction getMin() {\n  let current = this.root;\n  while (current.left != null) {\n    current = current.left;\n  }\n  return current.data;\n}\n\nfunction getMax() {\n  let current = this.root;\n  while (current.right != null) {\n    current = current.right;\n  }\n  return current.data;\n}\n\nfunction find(data) {\n  let current = this.root;\n\n  while (current != null) {\n    if (current.data === data) {\n      return current;\n    }\n\n    if (data < current.data) {\n      current = current.left;\n    } else {\n      current = current.right;\n    }\n  }\n}\n\nfunction remove(data) {\n  this.root = removeNode(this.root, data);\n}\n\nfunction removeNode(node, data) {\n  if (node == null) {\n    return null;\n  }\n  if (data == node.data) {\n        // node has no children\n    if (node.left == null && node.right == null) {\n      return null;\n    }\n        // node has no left child\n    if (node.left == null) {\n      return node.right;\n    }\n        // node has no right child\n    if (node.right == null) {\n      return node.left;\n    }\n        // node has two children\n    const tempNode = getSmallest(node.right);\n    node.data = tempNode.data;\n    node.right = removeNode(node.right, tempNode.data);\n    return node;\n  }\n  else if (data < node.data) {\n    node.left = removeNode(node.left, data);\n    return node;\n  }\n    else {\n    node.right = removeNode(node.right, data);\n    return node;\n  }\n}\n\n\nconst nums = new BST();\nnums.insert(23);\nnums.insert(45);\nnums.insert(16);\nnums.insert(37);\nnums.insert(3);\nnums.insert(99);\nnums.insert(22);\n// console.log(\"Pos traversal: \");\n// posOrder(nums.root);\n\nconsole.log(nums.getMin());\nconsole.log(nums.getMax());\nconsole.log(nums.find(16));\n"]}