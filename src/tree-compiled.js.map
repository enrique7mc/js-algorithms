{"version":3,"sources":["tree.js"],"names":[],"mappings":"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","file":"tree-compiled.js","sourcesContent":["'use strict';\n\nfunction Node (data, left, right) {\n    this.data = data;\n    this.left = left;\n    this.right = right;\n}\n\nfunction BST () {\n    this.root = null;\n    this.insert = insert;\n    this.getMin = getMin;\n    this.getMax = getMax;\n    this.find = find;\n}\n\nfunction insert (data) {\n    let n = new Node(data, null, null);\n    if (this.root == null) {\n        this.root = n;\n        return;\n    }\n\n    let current = this.root;\n    let parent;\n    while (true) {\n        parent = current;\n        if (data < current.data) {\n            current = current.left;\n            if (current == null) {\n                parent.left = n;\n                break;\n            }\n        } else {\n            current = current.right;\n            if (current == null) {\n                parent.right = n;\n                break;\n            }\n        }\n    }\n}\n\nfunction inOrder (node) {\n    if(node == null) return;\n    inOrder(node.left);\n    console.log(node.data);\n    inOrder(node.right);\n}\n\nfunction preOrder (node) {\n    if(node == null) return;\n    console.log(node.data);\n    preOrder(node.left);\n    preOrder(node.right);\n}\n\nfunction posOrder (node) {\n    if(node == null) return;\n    posOrder(node.left);\n    posOrder(node.right);\n    console.log(node.data);\n}\n\nfunction getMin () {\n    let current = this.root;\n    while(current.left != null) {\n        current = current.left;\n    }\n    return current.data;\n}\n\nfunction getMax () {\n    let current = this.root;\n    while(current.right != null) {\n        current = current.right;\n    }\n    return current.data;\n}\n\nfunction find (data) {\n    let current = this.root;\n\n    while (current != null) {\n        if (current.data === data) {\n            return current;\n        }\n\n        if (data < current.data) {\n            current = current.left;\n        } else {\n            current = current.right;\n        }\n    }\n}\n\nfunction remove (data) {\n    this.root = removeNode(this.root, data);\n}\n\nfunction removeNode(node, data) {\n    if (node == null) {\n        return null;\n    }\n    if (data == node.data) {\n        // node has no children\n        if (node.left == null && node.right == null) {\n            return null;\n        }\n        // node has no left child\n        if (node.left == null) {\n            return node.right;\n        }\n        // node has no right child\n        if (node.right == null) {\n            return node.left;\n        }\n        // node has two children\n        var tempNode = getSmallest(node.right);\n        node.data = tempNode.data;\n        node.right = removeNode(node.right, tempNode.data);\n        return node;\n    }\n    else if (data < node.data) {\n        node.left = removeNode(node.left, data);\n        return node;\n    }\n    else {\n        node.right = removeNode(node.right, data);\n        return node;\n    }\n}\n\n\nvar nums = new BST();\nnums.insert(23);\nnums.insert(45);\nnums.insert(16);\nnums.insert(37);\nnums.insert(3);\nnums.insert(99);\nnums.insert(22);\n// console.log(\"Pos traversal: \");\n// posOrder(nums.root);\n\nconsole.log(nums.getMin());\nconsole.log(nums.getMax());\nconsole.log(nums.find(16));\n"]}