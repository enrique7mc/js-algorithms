{"version":3,"sources":["bst.js"],"names":[],"mappings":"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","file":"bst-compiled.js","sourcesContent":["'use strict';\n\nfunction Node(data, left, right) {\n  this.data = data;\n  this.left = left;\n  this.right = right;\n}\n\nfunction BST() {\n  this.root = null;\n  this.insert = insert;\n  this.getMin = getMin;\n  this.getMax = getMax;\n  this.find = find;\n}\n\nfunction insert(data) {\n  const n = new Node(data, null, null);\n  if (this.root == null) {\n    this.root = n;\n    return;\n  }\n\n  let current = this.root;\n  let parent;\n  while (true) {\n    parent = current;\n    if (data < current.data) {\n      current = current.left;\n      if (current == null) {\n        parent.left = n;\n        break;\n      }\n    } else {\n      current = current.right;\n      if (current == null) {\n        parent.right = n;\n        break;\n      }\n    }\n  }\n}\n\nfunction inOrder(node) {\n  if (node == null) return;\n  inOrder(node.left);\n  console.log(node.data);\n  inOrder(node.right);\n}\n\nfunction inOrderIterative(node) {\n  if (node == null) return;\n  let pending = [];\n  let str = '';\n  let current = node;\n\n  while(current != null) {\n    pending.push(current);\n    current = current.left;\n  }\n  while (pending.length > 0) {\n    current = pending.pop();\n    str += current.data + ' ';\n    if (current.right) {\n      current = current.right;\n      while (current != null) {\n        pending.push(current);\n        current = current.left;\n      }\n    }\n  }\n  console.log(str);\n}\n\nfunction depthFirstSearchIterative (node) {\n  let nodes = [node];\n  while(nodes.length) {\n    var current = nodes.pop();\n    console.log(current.data);\n\n    if (current.left) {\n      nodes.push(current.left);\n    }\n\n    if (current.right) {\n      nodes.push(current.right);\n    }\n  }\n}\n\nfunction secondLargest (node) {\n  let current = node;\n\n  if (!current.right) {\n    return current.parent.data;\n  }\n\n  let parent = current;\n  current = current.right;\n  current.parent = parent;\n  return secondLargest(current);\n}\n\nfunction secondLargestIterative (node) {\n  let nodes = [];\n  nodes.push({ node, parent: null});\n  while(nodes.length) {\n    let popped = nodes.pop();\n    let current = popped.node;\n    let parent = popped.parent;\n\n    if (current.right) {\n      nodes.push({node: current.right, parent: current});\n    } else {\n      return parent.data;\n    }\n  }\n}\n\nfunction getHeight(node) {\n  // height of empty node = -1\n  if (!node) {\n    return -1;\n  }\n\n  // recursively get Height of left and right\n  const leftHeight = getHeight(node.left);\n  const rightHeight = getHeight(node.right);\n\n  // height is equal to the greatest height plus 1\n  return Math.max(leftHeight, rightHeight) + 1;\n}\n\nfunction preOrder(node) {\n  if (node == null) return;\n  console.log(node.data);\n  preOrder(node.left);\n  preOrder(node.right);\n}\n\nfunction posOrder(node) {\n  if (node == null) return;\n  posOrder(node.left);\n  posOrder(node.right);\n  console.log(node.data);\n}\n\nfunction getMin() {\n  let current = this.root;\n  while (current.left != null) {\n    current = current.left;\n  }\n  return current.data;\n}\n\nfunction getMax() {\n  let current = this.root;\n  while (current.right != null) {\n    current = current.right;\n  }\n  return current.data;\n}\n\nfunction find(data) {\n  let current = this.root;\n\n  while (current != null) {\n    if (current.data === data) {\n      return current;\n    }\n\n    if (data < current.data) {\n      current = current.left;\n    } else {\n      current = current.right;\n    }\n  }\n}\n\nfunction remove(data) {\n  this.root = removeNode(this.root, data);\n}\n\nfunction removeNode(node, data) {\n  if (node == null) {\n    return null;\n  }\n  if (data == node.data) {\n        // node has no children\n    if (node.left == null && node.right == null) {\n      return null;\n    }\n        // node has no left child\n    if (node.left == null) {\n      return node.right;\n    }\n        // node has no right child\n    if (node.right == null) {\n      return node.left;\n    }\n        // node has two children\n    const tempNode = getSmallest(node.right);\n    node.data = tempNode.data;\n    node.right = removeNode(node.right, tempNode.data);\n    return node;\n  }\n  else if (data < node.data) {\n    node.left = removeNode(node.left, data);\n    return node;\n  }\n    else {\n    node.right = removeNode(node.right, data);\n    return node;\n  }\n}\n\nfunction isLeaf (node) {\n  return node.left == null && node.right == null;\n}\n\n\nconst nums = new BST();\nlet numbers = [3, 9, 11, 16, 22, 23, 37, 45, 99];\n// numbers.forEach(n => {\n//   nums.insert(n);\n// });\n\nlet start = Math.floor(numbers.length / 2);\nlet i = start - 1, j = start;\nwhile(i >= 0 || j <= numbers.length - 1) {\n  if(numbers[j]) {\n    nums.insert(numbers[j]);\n    console.log(`Inserting: ${numbers[j]}`);\n    j++;\n  }\n  if(numbers[i]) {\n    nums.insert(numbers[i]);\n    console.log(`Inserting: ${numbers[i]}`);\n    i--;\n  }\n}\n\n// nums.insert(1);\n// nums.insert(2);\n// nums.insert(4);\n// nums.insert(5);\n// nums.insert(3);\n\nconsole.log(\"In traversal: \");\n// inOrder(nums.root);\ninOrderIterative(nums.root);\n//console.log(secondLargest(nums.root));\nconsole.log(getHeight(nums.root));\n"]}