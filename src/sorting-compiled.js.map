{"version":3,"sources":["sorting.js"],"names":[],"mappings":"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","file":"sorting-compiled.js","sourcesContent":["\"use strict\";\n\nfunction mergeSort (arr) {\n    let length = arr.length;\n    if (length === 1) {\n        return arr[0];\n    }\n    let mid = length / 2;\n    let left = arr.slice(0, mid);\n    let right = arr.slice(mid, length);\n\n    mergeSort(left);\n    mergeSort(right);\n    merge(arr, left, right);\n}\n\nfunction merge (target, left, right) {\n    let i = 0, j = 0, k = 0;\n\n    while(i < left.length && j < right.length) {\n        if (left[i] < right[j]) {\n            target[k] = left[i];\n            k++;\n            i++;\n        } else {\n            target[k] = right[j];\n            k++;\n            j++;\n        }\n    }\n\n    while (i < left.length) {\n        target[k] = left[i];\n        k++;\n        i++;\n    }\n\n    while (j < right.length) {\n        target[k] = right[j];\n        k++;\n        j++;\n    }\n}\n\nfunction quickSort(arr) {\n    quickSortImp(arr, 0, arr.length - 1);\n}\n\nfunction quickSortImp (arr, start, end) {\n    if (start >= end) return;\n\n    let pIndex = naivePartition(arr, start, end);\n    quickSortImp(arr, start, pIndex - 1);\n    quickSortImp(arr, pIndex + 1, end);\n}\n\nfunction naivePartition(arr, start, end) {\n    let pivot = arr[end];\n    let pIndex = start;\n    for (let i = start; i < end; i++){\n        if (arr[i] <= pivot) {\n            swap(arr, i, pIndex);\n            pIndex++;\n        }\n    }\n\n    swap(arr, pIndex, end);\n    return pIndex;\n}\n\nfunction dutchFlagPartition (arr, start, end) {\n    let pivot = arr[end];\n    let left = start;\n    let right = end;\n    let middle = start;\n\n    while (middle < right) {\n        if (arr[middle] < pivot) {\n            swap(arr, left++, middle++);\n        } else if (arr[middle] === pivot) {\n            middle++;\n        } else {\n            swap(arr, middle, right--);\n        }\n    }\n}\n\nfunction swap (arr, a, b) {\n    const temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n}\n\n// tests\n// let target = new Array(8);\n// let a = [1, 2, 6, 7];\n// let b = [4, 5, 8, 10];\n// let result = merge(target, a, b);\n// console.log(result);\n\nlet arr = [2, 5, 3, 6, 7, 1, 8, 4];\n// mergeSort(arr);\n// console.log(arr);\nquickSort(arr, 0, arr.length - 1)\nconsole.log(arr);\n"]}