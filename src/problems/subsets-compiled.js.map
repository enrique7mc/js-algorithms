{"version":3,"sources":["subsets.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAClB,QAAG,IAAI,MAAJ,KAAe,CAAlB,EAAsB,OAAO,CAAC,EAAD,CAAP;;AAEtB,UAAM,QAAQ,IAAI,CAAJ,CAAd;AACA,UAAM,mBAAmB,QAAQ,IAAI,KAAJ,CAAU,CAAV,CAAR,CAAzB;AACA,UAAM,SAAS,EAAf;AACA,SAAI,MAAM,MAAV,IAAoB,gBAApB,EAAsC;AAClC,eAAO,IAAP,CAAY,MAAZ;AACA,eAAO,IAAP,CAAY,CAAC,KAAD,EAAQ,GAAG,MAAX,CAAZ;AACH;;AAED,WAAO,MAAP;AACH;;AAED,MAAM,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAZ;AACA,MAAM,SAAS,QAAQ,GAAR,CAAf;AACA,QAAQ,GAAR,CAAY,MAAZ","file":"subsets-compiled.js","sourcesContent":["/**\n * Created by enrique.munguia on 10/11/16.\n */\n\n/*\n    Get all subsets from a set\n\n    - Base case, empty array returns the empty set\n    - Get the first element in the set\n    - Get the subsets of the remaining elements\n    - To calculate the result add each of those subsets\n      AND add the subset plus the first element\n    - return the result\n\n    Complexity\n    Time: O(2^n)\n */\n\nfunction subsets(arr) {\n    if(arr.length === 0)  return [[]];\n\n    const first = arr[0];\n    const remainingSubsets = subsets(arr.slice(1));\n    const result = [];\n    for(const subset of remainingSubsets) {\n        result.push(subset);\n        result.push([first, ...subset]);\n    }\n\n    return result;\n}\n\nconst arr = [1, 2, 3];\nconst result = subsets(arr);\nconsole.log(result);"]}