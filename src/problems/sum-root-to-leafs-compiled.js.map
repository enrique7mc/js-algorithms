{"version":3,"sources":["sum-root-to-leafs.js"],"names":[],"mappings":";;;;AAIA,SAAS,IAAT,CAAc,IAAd,EAAoB,IAApB,EAA0B,KAA1B,EAAiC;AAC7B,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,KAAL,GAAa,KAAb;AACH;;AAED,SAAS,MAAT,CAAiB,IAAjB,EAAuB;AACnB,WAAO,KAAK,IAAL,IAAa,IAAb,IAAqB,KAAK,KAAL,IAAc,IAA1C;AACH;;AAED,SAAS,cAAT,CAAwB,IAAxB,EAA8B;AAC1B,QAAG,CAAC,IAAJ,EAAU,OAAO,CAAP;;AAEV,SAAK,GAAL,GAAW,CAAX;AACA,QAAI,SAAS,CAAb;AACA,UAAM,QAAQ,CAAC,IAAD,CAAd;AACA,WAAM,MAAM,MAAZ,EAAoB;AAChB,YAAI,UAAU,MAAM,KAAN,EAAd;AACA,YAAI,aAAc,QAAQ,GAAR,GAAc,EAAf,GAAqB,QAAQ,IAA9C;AACA,YAAI,OAAO,OAAP,CAAJ,EAAqB;AACjB,sBAAU,UAAV;AACA;AACH;;AAED,YAAG,QAAQ,IAAX,EAAiB;AACb,gBAAI,OAAO,QAAQ,IAAnB;AACA,iBAAK,GAAL,GAAW,UAAX;AACA,kBAAM,IAAN,CAAW,IAAX;AACH;;AAED,YAAG,QAAQ,KAAX,EAAkB;AACd,gBAAI,QAAQ,QAAQ,KAApB;AACA,kBAAM,GAAN,GAAY,UAAZ;AACA,kBAAM,IAAN,CAAW,KAAX;AACH;AACJ;;AAED,WAAO,MAAP;AACH;;AAED,SAAS,uBAAT,CAAiC,IAAjC,EAAuC;AACnC,WAAO,UAAU,IAAV,EAAgB,CAAhB,CAAP;AACH;;AAED,SAAS,SAAT,CAAmB,IAAnB,EAAyB,UAAzB,EAAqC;AACjC,QAAG,CAAC,IAAJ,EAAU,OAAO,CAAP;;AAEV,iBAAc,aAAa,EAAd,GAAoB,KAAK,IAAtC;;AAEA,QAAG,OAAO,IAAP,CAAH,EAAiB;AACb,eAAO,UAAP;AACH;;AAED,WAAO,UAAU,KAAK,IAAf,EAAqB,UAArB,IAAmC,UAAU,KAAK,KAAf,EAAsB,UAAtB,CAA1C;AACH;;AAED,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,CAAT;;AAEA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,EAAY,EAAZ,EAAgB,EAAhB,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,EAAY,EAAZ,CAAT;AACA,IAAI,KAAK,IAAI,IAAJ,CAAS,CAAT,EAAY,EAAZ,EAAgB,EAAhB,CAAT;;AAEA,MAAM,SAAS,eAAe,EAAf,CAAf;AACA,MAAM,UAAU,wBAAwB,EAAxB,CAAhB;AACA,QAAQ,GAAR,CAAY,MAAZ;AACA,QAAQ,GAAR,CAAY,OAAZ","file":"sum-root-to-leafs-compiled.js","sourcesContent":["/**\n * Created by enrique.munguia on 10/18/16.\n */\n\nfunction Node(data, left, right) {\n    this.data = data;\n    this.left = left;\n    this.right = right;\n}\n\nfunction isLeaf (node) {\n    return node.left == null && node.right == null;\n}\n\nfunction sumRootToLeafs(node) {\n    if(!node) return 0;\n\n    node.sum = 0;\n    let result = 0;\n    const queue = [node];\n    while(queue.length) {\n        let current = queue.shift();\n        let currentSum = (current.sum * 10) + current.data;\n        if (isLeaf(current)) {\n            result += currentSum;\n            continue;\n        }\n\n        if(current.left) {\n            let left = current.left;\n            left.sum = currentSum;\n            queue.push(left);\n        }\n\n        if(current.right) {\n            let right = current.right;\n            right.sum = currentSum;\n            queue.push(right);\n        }\n    }\n\n    return result;\n}\n\nfunction sumRootToLeafsRecursive(node) {\n    return sumHelper(node, 0);\n}\n\nfunction sumHelper(node, partialSum) {\n    if(!node) return 0;\n\n    partialSum = (partialSum * 10) + node.data;\n\n    if(isLeaf(node)) {\n        return partialSum;\n    }\n\n    return sumHelper(node.left, partialSum) + sumHelper(node.right, partialSum);\n}\n\nlet n4 = new Node(4);\nlet n5 = new Node(2);\nlet n6 = new Node(5);\n\nlet n3 = new Node(3, n5, n6);\nlet n2 = new Node(2, n4);\nlet n1 = new Node(1, n2, n3);\n\nconst result = sumRootToLeafs(n1);\nconst result2 = sumRootToLeafsRecursive(n1);\nconsole.log(result);\nconsole.log(result2);"]}