{"version":3,"sources":["heap-sort.js"],"names":[],"mappings":";;;;AAIA,MAAM,EAAE,WAAF,EAAe,IAAf,KAAwB,QAAQ,SAAR,CAA9B;;;;;;;;;;;;AAYA,SAAS,cAAT,CAAwB,KAAxB,EAA+B,QAA/B,EAAyC;AACrC,QAAG,QAAQ,CAAR,IAAa,QAAQ,QAAxB,EAAkC,OAAO,CAAC,CAAR;;AAElC,WAAO,KAAK,KAAL,CAAW,CAAC,QAAQ,CAAT,IAAc,CAAzB,CAAP;AACH;;AAED,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,QAAlC,EAA4C;AACxC,UAAM,iBAAiB,QAAQ,CAAR,GAAY,CAAnC;AACA,QAAG,iBAAiB,QAApB,EAA8B,OAAO,CAAC,CAAR;;AAE9B,WAAO,cAAP;AACH;;AAED,SAAS,kBAAT,CAA4B,KAA5B,EAAmC,QAAnC,EAA6C;AACzC,UAAM,kBAAkB,QAAQ,CAAR,GAAY,CAApC;AACA,QAAG,kBAAkB,QAArB,EAA+B,OAAO,CAAC,CAAR;;AAE/B,WAAO,eAAP;AACH;;AAED,SAAS,aAAT,CAAuB,KAAvB,EAA8B,KAA9B,EAAqC,QAArC,EAA+C;AAC3C,UAAM,iBAAiB,kBAAkB,KAAlB,EAAyB,QAAzB,CAAvB;AACA,UAAM,kBAAkB,mBAAmB,KAAnB,EAA0B,QAA1B,CAAxB;;AAEA,QAAG,mBAAmB,CAAC,CAApB,IAAyB,MAAM,cAAN,IAAwB,MAAM,KAAN,CAApD,EAAkE;AAC9D,aAAK,KAAL,EAAY,cAAZ,EAA4B,KAA5B;AACA,sBAAc,KAAd,EAAqB,cAArB,EAAqC,QAArC;AACH;;AAED,QAAG,oBAAoB,CAAC,CAArB,IAA0B,MAAM,eAAN,IAAyB,MAAM,KAAN,CAAtD,EAAoE;AAChE,aAAK,KAAL,EAAY,eAAZ,EAA6B,KAA7B;AACA,sBAAc,KAAd,EAAqB,eAArB,EAAsC,QAAtC;AACH;AACJ;;AAED,SAAS,OAAT,CAAiB,KAAjB,EAAwB,QAAxB,EAAkC;AAC9B,QAAI,QAAQ,eAAe,QAAf,EAAyB,QAAzB,CAAZ;AACA,WAAM,SAAS,CAAf,EAAkB;AACd,sBAAc,KAAd,EAAqB,KAArB,EAA4B,QAA5B;AACA;AACH;AACJ;;AAED,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACrB,YAAQ,KAAR,EAAe,MAAM,MAAN,GAAe,CAA9B;;AAEA,QAAI,WAAW,MAAM,MAAN,GAAe,CAA9B;AACA,WAAM,WAAW,CAAjB,EAAoB;AAChB,aAAK,KAAL,EAAY,CAAZ,EAAe,QAAf;AACA;AACA,sBAAc,KAAd,EAAqB,CAArB,EAAwB,QAAxB;AACH;AACJ;;AAED,QAAQ,GAAR,CAAY,WAAZ;AACA,SAAS,WAAT;AACA,QAAQ,GAAR,CAAY,WAAZ","file":"heap-sort-compiled.js","sourcesContent":["/**\n * Created by enrique.munguia on 10/24/16.\n */\n\nconst { sampleArray, swap } = require('./utils');\n\n/*\n Heap Sort\n\n Complexity:\n Time: O(n log n)\n Space: O(1)\n Not stable\n Not adaptive\n */\n\nfunction getParentIndex(index, endIndex) {\n    if(index < 0 || index > endIndex) return -1;\n\n    return Math.floor((index - 1) / 2);\n}\n\nfunction getLeftChildIndex(index, endIndex) {\n    const leftChildIndex = index * 2 + 1;\n    if(leftChildIndex > endIndex) return -1;\n\n    return leftChildIndex;\n}\n\nfunction getRightChildIndex(index, endIndex) {\n    const rightChildIndex = index * 2 + 2;\n    if(rightChildIndex > endIndex) return -1;\n\n    return rightChildIndex;\n}\n\nfunction percolateDown(array, index, endIndex) {\n    const leftChildIndex = getLeftChildIndex(index, endIndex);\n    const rightChildIndex = getRightChildIndex(index, endIndex);\n\n    if(leftChildIndex !== -1 && array[leftChildIndex] > array[index]) {\n        swap(array, leftChildIndex, index);\n        percolateDown(array, leftChildIndex, endIndex);\n    }\n\n    if(rightChildIndex !== -1 && array[rightChildIndex] > array[index]) {\n        swap(array, rightChildIndex, index);\n        percolateDown(array, rightChildIndex, endIndex);\n    }\n}\n\nfunction heapify(array, endIndex) {\n    let index = getParentIndex(endIndex, endIndex);\n    while(index >= 0) {\n        percolateDown(array, index, endIndex);\n        index--;\n    }\n}\n\nfunction heapSort(array) {\n    heapify(array, array.length - 1);\n\n    let endIndex = array.length - 1;\n    while(endIndex > 0) {\n        swap(array, 0, endIndex);\n        endIndex--;\n        percolateDown(array, 0, endIndex);\n    }\n}\n\nconsole.log(sampleArray);\nheapSort(sampleArray);\nconsole.log(sampleArray);"]}