{"version":3,"sources":["list.test.js"],"names":[],"mappings":"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","file":"list.test-compiled.js","sourcesContent":["'use strict';\nvar expect = require('expect');\nvar List = require('../src/list');\n\ndescribe('List', function () {\n    describe('List object', function () {\n        it('should return a List object', function () {\n            expect(new List).toBeA(List)\n        });\n    });\n\n    describe('List length', function () {\n        it('should return an empty List', function () {\n            let list = new List();\n            expect(list.listSize).toBe(0);\n        });\n    });\n\n    describe('List position', function () {\n        it('should return the first position', function () {\n            let list = new List();\n            expect(list.position).toBe(0);\n        });\n    });\n\n    describe('clear(e)', function () {\n        it('should clear the list', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            expect(list.listSize).toBe(2);\n            list.clear();\n            expect(list.listSize).toBe(0);\n            expect(list.position).toBe(0);\n        });\n    });\n\n    describe('toString()', function () {\n        it('should return the list as string', function () {\n            let list = new List();\n            expect(list.toString()).toBe('[]');\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            expect(list.toString()).toBe('[1, 2, 3]');\n        });\n    });\n\n    describe('append(e)', function () {\n        it('should append an element at next position', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            expect(list.listSize).toBe(2);\n        });\n    });\n\n    describe('getElement()', function () {\n        it('should getElement at current position', function () {\n            let list = new List();\n            expect(list.getElement()).toBe(undefined);\n            list.append(1);\n            list.append(2);\n            expect(list.getElement()).toBe(1);\n        });\n    });\n\n    describe('find(element)', function () {\n        it('should find element position', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            expect(list.find(3)).toBe(2);\n            expect(list.find(2)).toBe(1);\n        });\n    });\n\n    describe('insert(element, after)', function () {\n        it('should find element position', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            var result = list.insert(5, 2);\n            expect(result).toBe(true);\n            expect(list.listSize).toBe(4);\n            expect(list.toString()).toBe('[1, 2, 5, 3]');\n        });\n    });\n\n    describe('remove(element)', function () {\n        it('should remove element', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            expect(list.remove(2)).toBe(true);\n            expect(list.listSize).toBe(2);\n            expect(list.remove('not here')).toBe(false);\n            expect(list.listSize).toBe(2);\n        });\n    });\n\n    describe('front()', function () {\n        it('should set position at the beginning', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            list.front();\n            expect(list.position).toBe(0);\n        });\n    });\n\n    describe('end()', function () {\n        it('should set position at the end', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            list.end();\n            expect(list.position).toBe(2);\n        });\n    });\n\n    describe('next()', function () {\n        it('should set position to the next element', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            expect(list.position).toBe(0);\n            list.next();\n            expect(list.position).toBe(1);\n            list.next();\n            expect(list.position).toBe(2);\n            list.next();\n            expect(list.position).toBe(2);\n        });\n    });\n\n    describe('prev()', function () {\n        it('should set position to the previous element', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            list.next();\n            list.next();\n            expect(list.position).toBe(2);\n            list.prev();\n            expect(list.position).toBe(1);\n            list.prev();\n            expect(list.position).toBe(0);\n            list.prev();\n            expect(list.position).toBe(0);\n        });\n    });\n\n    describe('currPos()', function () {\n        it('should retrieve the current position', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            expect(list.currPos()).toBe(0);\n            list.next();\n            expect(list.currPos()).toBe(1);\n            list.next();\n            expect(list.currPos()).toBe(2);\n            list.next();\n            expect(list.currPos()).toBe(2);\n        });\n    });\n\n    describe('end()', function () {\n        it('should set position at the end', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            list.end();\n            expect(list.position).toBe(2);\n        });\n    });\n\n    describe('moveTo(position)', function () {\n        it('should move to the specified position', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            list.moveTo(2);\n            expect(list.position).toBe(2);\n            list.moveTo(0);\n            expect(list.position).toBe(0);\n            list.moveTo(-1);\n            expect(list.position).toBe(0);\n        });\n    });\n\n    describe('contains(element)', function () {\n        it('should indicate if the element exists', function () {\n            let list = new List();\n            list.append(1);\n            list.append(2);\n            list.append(3);\n            expect(list.contains(1)).toBe(true);\n            expect(list.contains(2)).toBe(true);\n            expect(list.contains(3)).toBe(true);\n            expect(list.contains(4)).toBe(false);\n        });\n    });\n});"]}